//@version=5

// 1. Import library
import kaiku0125/Debug/1 as debug
import kaiku0125/Colour/8 as colour
import kaiku0125/FormatSDK/1 as fm
import kaiku0125/PNLRebalanceLib/5 as lib
var bool DEBUG = false
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #
indicator(
 title                = "PNLRebalance",
 shorttitle           = "ÊêçÁõäÂÜçÂπ≥Ë°°",
 overlay              =  true,
//  max_bars_back        =  100,
//  format               =  ,   
//  precision            =  ,
//  scale                =  ,
//  timeframe            = " ",
//  timeframe_gaps       =  ,
 explicit_plot_zorder =  true
//  max_lines_count      =  ,
//  max_labels_count     =  ,
//  max_boxes_count      =  
 )
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #

// 2. Preference inputs settings
var float CASH_RATIO = 25
var float SPECULATION_RATIO = 75
var float CRYPTO_RATIO = 45
var float TW_STOCKS_RATIO = 55

var float _006208_RATIO = 80
var float _00631L_RATIO = 20

var float BTC_CRYPTO_RATIO = 60
var float ETH_CRYPTO_RATIO = 25
var float CRO_CRYPTO_RATIO = 3
var float ADA_CRYPTO_RATIO = 6
var float MATIC_CRYPTO_RATIO = 6

var float BANK1_AVAL = 379314 + 50000                                            // LineBank (TWD)
var float BANK2_AVAL = 290000                                                    // Â∞á‰æÜ (TWD)  
var float BANK3_AVAL = 274264                                                    // Âè∞Êñ∞ (TWD)
var float BANK4_AVAL = 0                                                         // Ê®ÇÂ§© (TWD)
var float MAX_AVAL = 1619                                                        // MAX (USD)
var float EXCHANGE_USD = 130 + 0 + 0 + 390                                       // bybit + binance + Ê¥æÁ∂≤ + OKX

var float VISA_AVAL = 3144                                                      // Visa (USD) Âá∫Èáë

var float DEBT = -1000000                                                        // Ë≤†ÂÇµ

var float _006208_POSITION_BOUGHT = 400 + 900                                   // 006208 (ËÇ°)
var float _006208_COST = 27780 + 65348                                          // 006208Á∏ΩÊäïÂÖ• (TWD)
var float _006208_POSITION_SOLD = 400
var float _006208_INCOME = 28128

var float _00631L_POSITION_BOUGHT = 1
var float _00631L_COST = 0
var float _00631L_POSITION_SOLD = 1
var float _00631L_INCOME = 0

var float PIONEX_BTC_POSITION = 0.005 + 0.005299                                //Á∂≤Ê†º + Âπ£Âπ£Â§©Âú∞
var float PIONEX_BTC_COST = 100 + 214
var float MANUAL_BTC_POSITION = 0.1612
var float MANUAL_BTC_COST = 3851
var float BTC_POSITION_BOUGHT = MANUAL_BTC_POSITION + PIONEX_BTC_POSITION       // btc (È°Ü)
var float BTC_COST = MANUAL_BTC_COST + PIONEX_BTC_COST                          // btcÁ∏ΩÊäïÂÖ• (USD)
var float BTC_POSITION_SOLD = 0.00676
var float BTC_INCOME = 182.78

var float PIONEX_ETH_POSITION = 0.06539 + 0.3647                                //Á∂≤Ê†º + Âπ£Âπ£Â§©Âú∞
var float PIONEX_ETH_COST = 100 + 480 
var float MANUAL_ETH_COST = 871.95
var float MANUAL_ETH_POSITION = 0.516
var float ETH_POSITION_BOUGHT = MANUAL_ETH_POSITION + PIONEX_ETH_POSITION       // eth (È°Ü)         
var float ETH_COST = MANUAL_ETH_COST + PIONEX_ETH_COST                          // ethÁ∏ΩÊäïÂÖ• (USD)
var float ETH_POSITION_SOLD = 0
var float ETH_INCOME = 0

var float CRO_POSITION = 22952                                      // cro (È°Ü)
var float CRO_COST = 3632                                           // croÁ∏ΩÊäïÂÖ• (USD)
var float MATIC_POSITION = 368                                      // matic (È°Ü)
var float MATIC_COST = 365.8                                        // maticÁ∏ΩÊäïÂÖ• (USD)
var float ADA_POSITION = 1048                                       // ada (È°Ü)
var float ADA_COST = 318.74                                         // ada Á∏ΩÊäïÂÖ• (USD)
var float ILV_POSITION = 1.058                                      // ILV (È°Ü)
var float ILV_COST = 99.89                                          // ILVÁ∏ΩÊäïÂÖ• (USD)
var float ALI_POSITION = 4616.57                                    // ALI (È°Ü)
var float ALI_COST = 218.58                                         // ALIÁ∏ΩÊäïÂÖ• (USD)
var float FET_POSITION = 37                                         // FET (È°Ü)
var float FET_COST = 19.79                                          // FETÁ∏ΩÊäïÂÖ• (USD)
var float BNB_POSITION = 0.61                                       // BNB (È°Ü)
var float BNB_COST = 142.38                                         // BNBÁ∏ΩÊäïÂÖ• (USD)
var float BIT_POSITION = 73.03                                      // BIT (È°Ü)
var float BIT_COST = 41.99                                          // BITÁ∏ΩÊäïÂÖ• (USD)
var float DYDX_POSITION = 18.18                                     // DYDX (È°Ü)
var float DYDX_COST = 49.98                                         // DYDXÁ∏ΩÊäïÂÖ• (USD)
var float STEPN_GMT = 30 * 140 + 349 + 319 + 2 * 235                // GMT (È°Ü)
var float GMT_POSITION = STEPN_GMT                         
var float GMT_COST = 4500 + 100 + 120.9 + 224 + 423 + 513           //GMTÁ∏ΩÊäïÂÖ•(USD)

var float ALL_STOCKS_COST = _006208_COST + _00631L_COST             //Âè∞ËÇ°ÊàêÊú¨
var float ALL_CRYPTO_COST = 789876                                   //Âπ£ÂúàÊàêÊú¨

var string USD = "ÁæéÈáë"
var string TWD = "Âè∞Âπ£"
var string SYMBOLL = "„Äê„Äë"

var string SIZE_TINY = "Ê•µÂ∞è"
var string SIZE_SMALL = "Â∞è"
var string SIZE_NORMAL = "‰∏≠"
var string SIZE_LARGE = "Â§ß"
var string BOTTOM_CENTER = "‰∏≠ÈñìÈù†‰∏ã"
var string MIDDLE_CENTER = "Ê≠£‰∏≠Â§Æ"

var string INFO_ALL_ASSETS = "Ë≥áÁî¢ + ÁèæÈáë"
var string INFO_UNSTEADY_ASSETS = "Ë≥áÁî¢"
var string INFO_PNL_ASSETS = "Á∏ΩË≥áÁî¢ PNL"
var string POSITION_TITLE = "ÈáèÈ´î"
var string STOCK_COST_TITLE = "ËÇ° ‚ûî ÊàêÊú¨"
var string CRYPTO_COST_TITLE = "È°Ü ‚ûî ÊàêÊú¨"

var string INLINE_006208 = "03"
var string INLINE_00631L = "04"

var string INLINE_BTC = "06"
var string INLINE_ETH = "07"
var string INLINE_CRO = "08"
var string INLINE_MATIC = "09"
var string INLINE_ADA = "10"
var string INLINE_BNB = "11"
var string INLINE_BIT = "12"
var string INLINE_DYDX = "13"
var string INLINE_ALI = "14"
var string INLINE_AGIX = "15"
var string INLINE_FET = "16"
var string INLINE_ILV = "17"
var string INLINE_GMT = "18"
var string INLINE_OTHER = "19"
var string INLINE_USDT = "20"

var string GROUP_SETTING = "‚öôÔ∏è Ë®≠ÂÆö"
var string GROUP_RATIO = "üìå Á∏ΩÈÖçÊØî"
var string GROUP_ASSETS_RATIO = "üìå Ë≥áÁî¢ÈÖçÊØî"
var string GROUP_CASH = "üí≤ ÁèæÈáë"
var string GROUP_EXCHANGE = "üí≤ ÊèêÈ†ò"
var string GROUP_ASSETS = "üí≤ Ë≥áÁî¢"

var string GROUP_VERSION = "üí¨ ÈóúÊñº   ¬©Ô∏è"
var string VERSION_NAME = "v1.0"
var string RELEASE_NOTE = VERSION_NAME + " Release note :" + "\n" + 
                     "[1] First release."


//Calculate default value
var float INPUT_006208_POSITION = _006208_POSITION_BOUGHT - _006208_POSITION_SOLD
var float INPUT_006208_COST = math.ceil(_006208_COST * (1 - (_006208_POSITION_SOLD / _006208_POSITION_BOUGHT))) 

var float INPUT_00631L_POSITION = _00631L_POSITION_BOUGHT - _00631L_POSITION_SOLD
var float INPUT_00631L_COST = math.ceil(_00631L_COST * (1 - (_00631L_POSITION_SOLD / _00631L_POSITION_BOUGHT))) 

var float INPUT_BTC_POSITION = BTC_POSITION_BOUGHT - BTC_POSITION_SOLD
var float INPUT_BTC_COST = math.ceil(BTC_COST * (1 - (BTC_POSITION_SOLD / BTC_POSITION_BOUGHT))) 

var float INPUT_ETH_POSITION = ETH_POSITION_BOUGHT - ETH_POSITION_SOLD
var float INPUT_ETH_COST = math.ceil(ETH_COST * (1 - (ETH_POSITION_SOLD / ETH_POSITION_BOUGHT))) 

INPUT_DISPLAY_TITLE = input.bool(defval = true, title = "Ê®ôÈ°å", inline = "00", group = GROUP_SETTING)
INPUT_DISPLAY_CASH = input.bool(defval = true, title = "ÁèæÈáë", inline = "00", group = GROUP_SETTING)
INPUT_DISPLAY_TWSTOCK = input.bool(defval = true, title = "Âè∞ËÇ°", inline = "00", group = GROUP_SETTING)
INPUT_DISPLAY_CRYPTO = input.bool(defval = true, title = "Âπ£Âúà", inline = "00", group = GROUP_SETTING)
INPUT_DISPLAY_ASSETS_CHART = input.bool(defval = true, title = "Ë≥áÁî¢Ëµ∞Âã¢Á∑öÂúñ", group = GROUP_SETTING)
INPUT_DISPLAY_CURRENCY = input.string(defval = TWD, title = "Ë≤®Âπ£È°ØÁ§∫", options = [TWD, USD], group = GROUP_SETTING)
INPUT_DISPLAY_SIZE = input.string(defval = SIZE_LARGE, title = "Ë°®Ê†ºÂ§ßÂ∞è", options = [SIZE_TINY, SIZE_SMALL, SIZE_NORMAL, SIZE_LARGE], group = GROUP_SETTING)
INPUT_DISPLAY_POSITION = input.string(defval = MIDDLE_CENTER, title = "Ë°®Ê†º‰ΩçÁΩÆ", options = [MIDDLE_CENTER, BOTTOM_CENTER], group = GROUP_SETTING)

INPUT_DISPLAY_INFO = input.string(defval = INFO_ALL_ASSETS, title = "Ë≥áÁî¢Ë≥áË®äÈ°ØÁ§∫", options = [INFO_ALL_ASSETS, INFO_UNSTEADY_ASSETS, INFO_PNL_ASSETS], group = GROUP_SETTING)

INPUT_SPECULATION_RATIO = input.float(defval = SPECULATION_RATIO, title = "Ë≥áÁî¢(%)", inline = "01", group = GROUP_RATIO) 
INPUT_CASH_RATIO = input.float(defval = CASH_RATIO, title = "ÁèæÈáë(%)", inline = "01", group = GROUP_RATIO) 
INPUT_CRYPTO_RATIO = input.float(defval = CRYPTO_RATIO, title = "Âπ£Âúà(%)", inline = "02", group = GROUP_ASSETS_RATIO)
INPUT_TW_STOCKS_RATIO = input.float(defval = TW_STOCKS_RATIO, title = "Âè∞ËÇ°(%)", inline = "02", group = GROUP_ASSETS_RATIO)

INPUT_BANK1 = input.float(defval = BANK1_AVAL, title = "LineBank(TWD)", group = GROUP_CASH) 
INPUT_BANK2 = input.float(defval = BANK2_AVAL, title = "ÂÖÜË±ê(TWD)", group = GROUP_CASH) 
INPUT_BANK3 = input.float(defval = BANK3_AVAL, title = "Âè∞Êñ∞(TWD)", group = GROUP_CASH) 
INPUT_BANK4 = input.float(defval = BANK4_AVAL, title = "ÂÖÉÂ§ß(TWD)", group = GROUP_CASH)
INPUT_MAX = input.float(defval = MAX_AVAL, title = "MAX(U)", group = GROUP_CASH)

INPUT_CRYPTO_COM_VISA = input.float(defval = VISA_AVAL, title = "Âπ£ÂúàVisa(U)", group = GROUP_EXCHANGE)

IS_006208_DISPLAY = input.bool(defval = true, title = "006208 :", inline = INLINE_006208, group = GROUP_ASSETS) 
MY_006208_POSITION = input.float(defval = INPUT_006208_POSITION, title = POSITION_TITLE, inline = INLINE_006208, group = GROUP_ASSETS)
MY_006208_COST = input.float(defval = INPUT_006208_COST, title = STOCK_COST_TITLE, inline = INLINE_006208, group = GROUP_ASSETS)

IS_00631L_DISPLAY = input.bool(defval = true, title = "00631L :", inline = INLINE_00631L, group = GROUP_ASSETS) 
MY_00631L_POSITION = input.float(defval = INPUT_00631L_POSITION, title = POSITION_TITLE, inline = INLINE_00631L, group = GROUP_ASSETS)
MY_00631L_COST = input.float(defval = INPUT_00631L_COST, title = STOCK_COST_TITLE, inline = INLINE_00631L, group = GROUP_ASSETS)

IS_BTC_DISPLAY = input.bool(defval = true, title = "BTC :", inline = INLINE_BTC, group = GROUP_ASSETS) 
MY_BTC_POSITION = input.float(defval = INPUT_BTC_POSITION, title = POSITION_TITLE, inline = INLINE_BTC, group = GROUP_ASSETS) 
MY_BTC_COST = input.float(defval = INPUT_BTC_COST, title = CRYPTO_COST_TITLE, inline = INLINE_BTC, group = GROUP_ASSETS) 

IS_ETH_DISPLAY = input.bool(defval = true, title = "ETH :", inline = INLINE_ETH, group = GROUP_ASSETS) 
MY_ETH_POSITION = input.float(defval = INPUT_ETH_POSITION, title = POSITION_TITLE, inline = INLINE_ETH, group = GROUP_ASSETS) 
MY_ETH_COST = input.float(defval = INPUT_ETH_COST, title = CRYPTO_COST_TITLE, inline = INLINE_ETH, group = GROUP_ASSETS) 

IS_CRO_DISPLAY = input.bool(defval = true, title = "CRO :", inline = INLINE_CRO, group = GROUP_ASSETS) 
MY_CRO_POSITION = input.float(defval = CRO_POSITION, title = POSITION_TITLE, inline = INLINE_CRO, group = GROUP_ASSETS) 
MY_CRO_COST = input.float(defval = CRO_COST, title = CRYPTO_COST_TITLE, inline = INLINE_CRO, group = GROUP_ASSETS) 

IS_MATIC_DISPLAY = input.bool(defval = true, title = "MATIC :", inline = INLINE_MATIC, group = GROUP_ASSETS) 
MY_MATIC_POSITION = input.float(defval = MATIC_POSITION, title = POSITION_TITLE, inline = INLINE_MATIC, group = GROUP_ASSETS) 
MY_MATIC_COST = input.float(defval = MATIC_COST, title = CRYPTO_COST_TITLE, inline = INLINE_MATIC, group = GROUP_ASSETS) 

IS_ADA_DISPLAY = input.bool(defval = true, title = "ADA :", inline = INLINE_ADA, group = GROUP_ASSETS) 
MY_ADA_POSITION = input.float(defval = ADA_POSITION, title = POSITION_TITLE, inline = INLINE_ADA, group = GROUP_ASSETS) 
MY_ADA_COST = input.float(defval = ADA_COST, title = CRYPTO_COST_TITLE, inline = INLINE_ADA, group = GROUP_ASSETS) 

IS_BNB_DISPLAY = input.bool(defval = true, title = "BNB :", inline = INLINE_BNB, group = GROUP_ASSETS) 
MY_BNB_POSITION = input.float(defval = BNB_POSITION, title = POSITION_TITLE, inline = INLINE_BNB, group = GROUP_ASSETS) 
MY_BNB_COST = input.float(defval = BNB_COST, title = CRYPTO_COST_TITLE, inline = INLINE_BNB, group = GROUP_ASSETS) 

IS_BIT_DISPLAY = input.bool(defval = true, title = "BIT :", inline = INLINE_BIT, group = GROUP_ASSETS) 
MY_BIT_POSITION = input.float(defval = BIT_POSITION, title = POSITION_TITLE, inline = INLINE_BIT, group = GROUP_ASSETS) 
MY_BIT_COST = input.float(defval = BIT_COST, title = CRYPTO_COST_TITLE, inline = INLINE_BIT, group = GROUP_ASSETS) 

IS_DYDX_DISPLAY = input.bool(defval = false, title = "DYDX :", inline = INLINE_DYDX, group = GROUP_ASSETS) 
MY_DYDX_POSITION = input.float(defval = DYDX_POSITION, title = POSITION_TITLE, inline = INLINE_DYDX, group = GROUP_ASSETS) 
MY_DYDX_COST = input.float(defval = DYDX_COST, title = CRYPTO_COST_TITLE, inline = INLINE_DYDX, group = GROUP_ASSETS) 

IS_ALI_DISPLAY = input.bool(defval = false, title = "ALI :", inline = INLINE_ALI, group = GROUP_ASSETS) 
MY_ALI_POSITION = input.float(defval = ALI_POSITION, title = POSITION_TITLE, inline = INLINE_ALI, group = GROUP_ASSETS) 
MY_ALI_COST = input.float(defval = ALI_COST, title = CRYPTO_COST_TITLE, inline = INLINE_ALI, group = GROUP_ASSETS) 

IS_FET_DISPLAY = input.bool(defval = false, title = "FET :", inline = INLINE_FET, group = GROUP_ASSETS) 
MY_FET_POSITION = input.float(defval = FET_POSITION, title = POSITION_TITLE, inline = INLINE_FET, group = GROUP_ASSETS) 
MY_FET_COST = input.float(defval = FET_COST, title = CRYPTO_COST_TITLE, inline = INLINE_FET, group = GROUP_ASSETS) 

IS_ILV_DISPLAY = input.bool(defval = false, title = "ILV :", inline = INLINE_ILV, group = GROUP_ASSETS) 
MY_ILV_POSITION = input.float(defval = ILV_POSITION, title = POSITION_TITLE, inline = INLINE_ILV, group = GROUP_ASSETS) 
MY_ILV_COST = input.float(defval = ILV_COST, title = CRYPTO_COST_TITLE, inline = INLINE_ILV, group = GROUP_ASSETS) 

IS_GMT_DISPLAY = input.bool(defval = true, title = "GMT :", inline = INLINE_GMT, group = GROUP_ASSETS) 
MY_GMT_POSITION = input.float(defval = GMT_POSITION, title = POSITION_TITLE, inline = INLINE_GMT, group = GROUP_ASSETS) 
MY_GMT_COST = input.float(defval = GMT_COST, title = CRYPTO_COST_TITLE, inline = INLINE_GMT, group = GROUP_ASSETS) 

IS_OTHER_DISPLAY = input.bool(defval = false, title = "ÂûÉÂúæÂπ£", inline = INLINE_OTHER, group = GROUP_ASSETS) 
MY_CHZ_POSITION = 443
MY_CHZ_COST = 100
MY_AXS_POSITION = 2.27 
MY_AXS_COST = 133
MY_ALICE_POSITION = 5.06 
MY_ALICE_COST = 100
MY_SAND_POSITION = 20.79
MY_SAND_COST = 100
MY_OTHER_CRYPTO_COST = MY_CHZ_COST + MY_AXS_COST + MY_ALICE_COST + MY_SAND_COST
IS_USDT_DISPLAY = input.bool(defval = true, title = "Ââ©È§òUSDT", inline = INLINE_USDT, group = GROUP_ASSETS)


INPUT_VERSION_NAME = input.string(defval = VERSION_NAME, title = "ÁâàÊú¨", options = [VERSION_NAME], tooltip = RELEASE_NOTE, group = GROUP_VERSION) 

// 3. Constant value initialization
var string CASH_TITLE = "‚ù∂ ÁèæÈáë"
var string TW_STOCKS_TITLE = "‚ûã Âè∞ËÇ°"
var string CRYPTO_TITLE = "‚ûå Âπ£Âúà"
var string ICON_MONEY = "üí∞ "
var string ICON_DOT = "‚óè"

var string TIME_FRAME = ""
var string USD_TWD_SYMBOL = "FX_IDC:USDTWD"
var string STOCK_006208_SYMBOL = "TWSE_DLY:006208"
var string STOCK_00631L_SYMBOL = "TWSE_DLY:00631L"
var string BTC_SYMBOL = "COINBASE:BTCUSD"
var string ETH_SYMBOL = "COINBASE:ETHUSD"
var string CRO_SYMBOL = "COINBASE:CROUSD"
var string MATIC_SYMBOL = "COINBASE:MATICUSD"
var string ADA_SYMBOL = "BINANCE:ADAUSDT"
var string ILV_SYMBOL = "BINANCE:ILVUSDT"
var string CHZ_SYMBOL = "BYBIT:CHZUSDT.P"
var string GMT_SYMBOL = "BINANCE:GMTUSDT"
var string AXS_SYMBOL = "BINANCE:AXSUSDT"
var string ALICE_SYMBOL = "BINANCE:ALICEUSDT"
var string SAND_SYMBOL = "BINANCE:SANDUSDT"
var string ALI_SYMBOL = "GEMINI:ALIUSD"
var string AGIX_SYMBOL = "BINANCE:AGIXBUSD"
var string FET_SYMBOL = "BINANCE:FETUSDT"
var string BNB_SYMBOL = "BINANCE:BNBUSDT"
var string BIT_SYMBOL = "BYBIT:MNTUSDT"
var string DYDX_SYMBOL = "BINANCE:DYDXUSDT"

var color COLOR_MY_WHITE = color.rgb(255, 255, 204, 30) 
var color COLOR_BG = color.rgb(77, 77, 77, 30)
var color DF_TEXT_COLOR = COLOR_MY_WHITE
// var color DF_TEXT_COLOR = colour.LIGHT_SKY_BLUE()
var color DF_CELL_COLOR = COLOR_BG
// var color DF_CELL_COLOR = colour.INDIGO(10)
var color DF_ASSET_TITLE_COLOR = colour.LIGHT_CYAN(0)

// 4. Variable declartion
type RecordData
    int mYear
    int mMonth
    int mDay
    float mNowTotal

var array<RecordData> rdArray = array.new<RecordData>()

var float pUsd_Twd = na
var float p006208 = na
var float p00631L = na
var float pBTC = na
var float pETH = na
var float pCRO = na
var float pMATIC = na
var float pADA = na
var float pILV = na
var float pALI = na
var float pAGIX = na
var float pFET = na
var float pBNB = na
var float pBIT = na
var float pDYDX = na

var float pCHZ = na
var float pGMT = na
var float pAXS = na
var float pALICE = na
var float pSAND = na

var float totalAssets = 0

var float recordAssetsVariation = 0

var table displayTabel = na
var table ratioTabel = na

// 5. Define functions
getPNLText(string _stateIcon, string _pnlText, string _pnlPercentText) =>
    string output = lib.DISPLAY_NONE()

    if _stateIcon != lib.DISPLAY_NONE() 
        output := "\t" + _pnlText + "\t„Äê" + _pnlPercentText + "„Äë" + _stateIcon
    
    output

cell(int columnID, int rowID, string displayText, color textColor, color background) =>
    table.cell(
     table_id       =  displayTabel, 
     column         =  columnID, 
     row            =  rowID, 
     text           =  displayText, 
     text_color     =  textColor,
     text_size      =  lib.getTableSize(INPUT_DISPLAY_SIZE),
     bgcolor        =  background
     )

cellRatio(int columnID, int rowID, string displayText, color textColor, color background) =>
    table.cell(
     table_id       =  ratioTabel, 
     column         =  columnID, 
     row            =  rowID, 
     text           =  displayText, 
     text_color     =  textColor,
     text_size      =  lib.getTableSize(INPUT_DISPLAY_SIZE),
     bgcolor        =  background
     )

cellBlankRebalance(int rowID, string targetSymbol, nowRatio) =>
    cell(0, rowID, targetSymbol, DF_ASSET_TITLE_COLOR, DF_CELL_COLOR)
    cell(1, rowID, fm.ratioString(nowRatio), DF_TEXT_COLOR, DF_CELL_COLOR)
    cell(2, rowID, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)

cellRebalance(int rowID, string targetSymbol, nowRatio, string rebalanceText) =>
    cell(0, rowID, targetSymbol, DF_ASSET_TITLE_COLOR, DF_CELL_COLOR)
    cell(1, rowID, fm.ratioString(nowRatio), DF_TEXT_COLOR, DF_CELL_COLOR)
    cell(2, rowID, rebalanceText, DF_TEXT_COLOR, DF_CELL_COLOR)

cellPNL(rowID, remain, pnl, pnlPercent) =>
    float mPnlPercent = na(pnlPercent) ? 0 : pnlPercent
    string remainText = fm.fString(remain, 0)
    cell(3, rowID, remainText, DF_TEXT_COLOR, DF_CELL_COLOR)
    
    string pnlText = pnl == 0 ? lib.DISPLAY_NONE() : fm.fString(pnl, 0) 
    string pnlPercentText = mPnlPercent == 0 ? lib.DISPLAY_NONE() : fm.ratioString(mPnlPercent)
    [stateIcon, stateColor] = lib.ratioStateJudge(mPnlPercent * 100, colour.LIME_GREEN(0))
    cell(
     columnID         =  4, 
     rowID            =  rowID, 
     displayText      =  getPNLText(stateIcon, pnlText, pnlPercentText), 
     textColor        =  stateColor,
     background       =  DF_CELL_COLOR
     )
    int nextRow = rowID + 1
    nextRow

//Â∑≤ÁµêÁõàËôß
cellIncome(rowID, _income, _cost, input_symbol_cost) =>
    float settlement = _income - (_cost - input_symbol_cost)
    string settleText = fm.fString(settlement, 0)
    // color textColor = settlement >= 0 ? colour.LIME_GREEN(0) : color.red
    color textColor = if settlement < 0
        color.red
    else if settlement > 0
        colour.LIME_GREEN(0)
    else 
        DF_TEXT_COLOR

    cell(5, rowID, settleText, textColor, DF_CELL_COLOR)

cellIncome2(rowID, income, cost, sold, bought) =>
    float buy_price = cost / bought
    float sell_price = income / sold
    float realized = (sell_price - buy_price) * sold
    string settleText = fm.fString(realized, 0)
    color textColor = realized >= 0 ? colour.LIME_GREEN(0) : colour.FIRE_BRICK(0)
    cell(5, rowID, settleText, textColor, DF_CELL_COLOR)

cellBlank(int rowID) => 
    for i = 0 to 4
        table.cell(displayTabel, column = i, row = rowID,  text = "", height = 1)
    int nextRow = rowID + 1
    nextRow

getRebalanceText(string bankName, float bankAval, float rebalance) =>
    float _rebalance = INPUT_DISPLAY_CURRENCY == TWD ? rebalance : rebalance * pUsd_Twd
    float diff = _rebalance - bankAval
    string action =  diff > 0 ? "ÂÖ•Èáë " : "ÊèêÈ†ò "
    string output = bankName + action + fm.fString(math.abs(diff), 0) + "\t" + TWD
    output

getDisplayInfo(float _totalAssets, float _totalSpecultaionAssets, float _speculationPNL, float _speculaionPNLRatio) =>
    string opText = if INPUT_DISPLAY_INFO == INFO_UNSTEADY_ASSETS
        ICON_MONEY + fm.fString(_totalSpecultaionAssets, 0)
    else if INPUT_DISPLAY_INFO == INFO_PNL_ASSETS
        ICON_MONEY + fm.fString(_speculationPNL, 0) + "\t„Äê" + fm.ratioString(_speculaionPNLRatio) + "„Äë\t"
    else 
        ICON_MONEY + fm.fString(totalAssets, 0)
    
    [mIcon, mColor] = lib.ratioStateJudge(_speculaionPNLRatio * 100, colour.LIME_GREEN(0))
    color opColor = if INPUT_DISPLAY_INFO == INFO_UNSTEADY_ASSETS
        colour.GOLDER_ROD(0)
    else if INPUT_DISPLAY_INFO == INFO_PNL_ASSETS
        mColor
    else 
        colour.GOLD(0)
    [opText, opColor]

newData(int _year, int _month, int _day, float _nowTotal) =>
    RecordData data = RecordData.new(_year, _month, _day, _nowTotal)
    data

getCurrentSymbol(float value) =>
    string mOutput = fm.fString(value, 4)
    label debugLabel = debug.printLabel("ÂúñË°®ID : " + syminfo.tickerid + ", ÂÉπÊ†º : " + mOutput)
    // label.delete(id = debugLabel[1])

getDebugValue(value) =>
    string ddd = str.format("{0,time,HH:mm:ss.SSS}", timenow)
    string mOutput = str.tostring(value = value) 
    label debugLabel = debug.printLabel(mOutput)
    // label.delete(id = debugLabel[1])

// 6. Code logic start
if INPUT_CASH_RATIO + INPUT_SPECULATION_RATIO != 100
    runtime.error(message = "GGG") 

if INPUT_CRYPTO_RATIO + INPUT_TW_STOCKS_RATIO != 100
    runtime.error(message = "GGG") 

if  BTC_CRYPTO_RATIO + ETH_CRYPTO_RATIO + CRO_CRYPTO_RATIO + ADA_CRYPTO_RATIO + MATIC_CRYPTO_RATIO != 100
    runtime.error(message = "GGG") 

pUsd_Twd := request.security(symbol = USD_TWD_SYMBOL, timeframe = TIME_FRAME, expression = close)
p006208 := request.security(symbol =  STOCK_006208_SYMBOL, timeframe = TIME_FRAME, expression = close)
p00631L := request.security(symbol =  STOCK_00631L_SYMBOL, timeframe = TIME_FRAME, expression = close)
pBTC := request.security(symbol =  BTC_SYMBOL, timeframe = TIME_FRAME, expression = close)
pETH := request.security(symbol =  ETH_SYMBOL, timeframe = TIME_FRAME, expression = close)
pCRO := request.security(symbol =  CRO_SYMBOL, timeframe = TIME_FRAME, expression = close)
pMATIC := request.security(symbol =  MATIC_SYMBOL, timeframe = TIME_FRAME, expression = close)
pADA := request.security(symbol =  ADA_SYMBOL, timeframe = TIME_FRAME, expression = close)
pILV := request.security(symbol =  ILV_SYMBOL, timeframe = TIME_FRAME, expression = close)
pALI := request.security(symbol = ALI_SYMBOL, timeframe = TIME_FRAME, expression = close)
pAGIX := request.security(symbol = AGIX_SYMBOL, timeframe = TIME_FRAME, expression = close)
pFET := request.security(symbol = FET_SYMBOL, timeframe = TIME_FRAME, expression = close)
pBNB := request.security(symbol = BNB_SYMBOL, timeframe = TIME_FRAME, expression = close)
pBIT := request.security(symbol = BIT_SYMBOL, timeframe = TIME_FRAME, expression = close)
pDYDX := request.security(symbol = DYDX_SYMBOL, timeframe = TIME_FRAME, expression = close)

pCHZ := request.security(symbol = CHZ_SYMBOL, timeframe = TIME_FRAME, expression = close)
pGMT := request.security(symbol = GMT_SYMBOL, timeframe = TIME_FRAME, expression = close)
pAXS := request.security(symbol = AXS_SYMBOL, timeframe = TIME_FRAME, expression = close)
pALICE := request.security(symbol = ALICE_SYMBOL, timeframe = TIME_FRAME, expression = close)
pSAND := request.security(symbol = SAND_SYMBOL, timeframe = TIME_FRAME, expression = close)

usdEx = INPUT_DISPLAY_CURRENCY == TWD ? 1 * pUsd_Twd : 1
twdEx = INPUT_DISPLAY_CURRENCY == TWD ? 1 : 1 / pUsd_Twd

cashRatio = INPUT_CASH_RATIO / 100
specultaionRatio = INPUT_SPECULATION_RATIO / 100
cryptoRatio = INPUT_CRYPTO_RATIO / 100 * specultaionRatio
twStocksRatio = INPUT_TW_STOCKS_RATIO / 100 * specultaionRatio

_006208Ratio = twStocksRatio * _006208_RATIO
_00631LRatio = twStocksRatio * _00631L_RATIO

btcRatio = cryptoRatio * BTC_CRYPTO_RATIO
ethRatio = cryptoRatio * ETH_CRYPTO_RATIO
croRatio = cryptoRatio * CRO_CRYPTO_RATIO
adaRatio = cryptoRatio * ADA_CRYPTO_RATIO
maticRatio = cryptoRatio * MATIC_CRYPTO_RATIO

totalCash = (INPUT_BANK1 + INPUT_BANK2 + INPUT_BANK3 + INPUT_BANK4) * twdEx + INPUT_MAX * usdEx
totalStocksAssets = (p006208 * MY_006208_POSITION + p00631L * MY_00631L_POSITION) * twdEx

mainCryptoAssets  = pBTC * MY_BTC_POSITION
mainCryptoAssets += pETH * MY_ETH_POSITION
mainCryptoAssets += pCRO * MY_CRO_POSITION
mainCryptoAssets += pMATIC * MY_MATIC_POSITION 
mainCryptoAssets += pADA * MY_ADA_POSITION 
mainCryptoAssets += pILV * MY_ILV_POSITION 
mainCryptoAssets += pALI * MY_ALI_POSITION 
mainCryptoAssets += pFET * MY_FET_POSITION
mainCryptoAssets += pBNB * MY_BNB_POSITION
mainCryptoAssets += pBIT * MY_BIT_POSITION
mainCryptoAssets += pDYDX * MY_DYDX_POSITION
mainCryptoAssets += pGMT * MY_GMT_POSITION

otherCryptoASssets  = pCHZ * MY_CHZ_POSITION
otherCryptoASssets += pAXS * MY_AXS_POSITION
otherCryptoASssets += pALICE * MY_ALICE_POSITION
otherCryptoASssets += pSAND * MY_SAND_POSITION

totalCryptoAssets = (mainCryptoAssets + otherCryptoASssets) * usdEx + EXCHANGE_USD * usdEx
totalSpecultaionAssets = totalStocksAssets + totalCryptoAssets                                  //Á∏ΩÊäïÊ©üË≥áÁî¢
totalAssets := totalCash + totalSpecultaionAssets                                               //Á∏ΩË≥áÁî¢(ÁèæÈáë + ÊäïÊ©ü)
allCost = (ALL_STOCKS_COST + ALL_CRYPTO_COST) * twdEx - INPUT_MAX * usdEx                       //Á∏ΩÊäïÂÖ•ÊàêÊú¨
allDedt= DEBT * twdEx

cashRatioNow = totalCash / totalAssets                                                          //Áï∂‰∏ãÁèæÈáëÊØî‰æã
twStocksRatioNow = totalStocksAssets / totalAssets
cryptoRatioNow = totalCryptoAssets / totalAssets
speculationPNL = totalSpecultaionAssets - allCost + INPUT_CRYPTO_COM_VISA * usdEx
speculaionPNLRatio = speculationPNL / allCost

cashRebalance = totalAssets * cashRatio - totalCash
stockRebalance = totalAssets * twStocksRatio - totalStocksAssets
cryptoRebalance = totalAssets * cryptoRatio - totalCryptoAssets

[remain006208, pnl006208, pnlPercent006208, now006208Ratio] = lib.calDefault(p006208 * twdEx, MY_006208_POSITION, MY_006208_COST * twdEx, totalAssets)
[remain00631L, pnl00631L, pnlPercent00631L, now00631LRatio] = lib.calDefault(p00631L * twdEx, MY_00631L_POSITION, MY_00631L_COST * twdEx, totalAssets)
[remainBTC, pnlBTC, pnlPercentBTC, nowBTCRatio] = lib.calDefault(pBTC * usdEx, MY_BTC_POSITION, MY_BTC_COST * usdEx, totalAssets)
[remainETH, pnlETH, pnlPercentETH, nowETHRatio] = lib.calDefault(pETH * usdEx, MY_ETH_POSITION, MY_ETH_COST * usdEx, totalAssets)
[remainCRO, pnlCRO, pnlPercentCRO, nowCRORatio] = lib.calDefault(pCRO * usdEx, MY_CRO_POSITION, MY_CRO_COST * usdEx, totalAssets)
[remainMATIC, pnlMATIC, pnlPercentMATIC, nowMATICRatio] = lib.calDefault(pMATIC * usdEx, MY_MATIC_POSITION, MY_MATIC_COST * usdEx, totalAssets)
[remainADA, pnlADA, pnlPercentADA, nowADARatio] = lib.calDefault(pADA * usdEx, MY_ADA_POSITION, MY_ADA_COST * usdEx, totalAssets)
[remainILV, pnlILV, pnlPercentILV, nowILVRatio] = lib.calDefault(pILV * usdEx, MY_ILV_POSITION, MY_ILV_COST * usdEx, totalAssets)
[remainALI, pnlALI, pnlPercentALI, nowALIRatio] = lib.calDefault(pALI * usdEx, MY_ALI_POSITION, MY_ALI_COST * usdEx, totalAssets)
[remainFET, pnlFET, pnlPercentFET, nowFETRatio] = lib.calDefault(pFET * usdEx, MY_FET_POSITION, MY_FET_COST * usdEx, totalAssets)
[remainBNB, pnlBNB, pnlPercentBNB, nowBNBRatio] = lib.calDefault(pBNB * usdEx, MY_BNB_POSITION, MY_BNB_COST * usdEx, totalAssets)
[remainBIT, pnlBIT, pnlPercentBIT, nowBITRatio] = lib.calDefault(pBIT * usdEx, MY_BIT_POSITION, MY_BIT_COST * usdEx, totalAssets)
[remainDYDX, pnlDYDX, pnlPercentDYDX, nowDYDXRatio] = lib.calDefault(pDYDX * usdEx, MY_DYDX_POSITION, MY_DYDX_COST * usdEx, totalAssets)
[remainGMT, pnlGMT, pnlPercentGMT, nowGMTRatio] = lib.calDefault(pGMT * usdEx, MY_GMT_POSITION, MY_GMT_COST * usdEx, totalAssets)
[remainOther, pnlOther, pnlPercentOther, nowOthersRatio] = lib.calByRemain(otherCryptoASssets * usdEx, MY_OTHER_CRYPTO_COST * usdEx, totalAssets)
[remainUSDT, pnlUSDT, pnlPercentUSDT, nowUSDTRatio] = lib.calByRemain(EXCHANGE_USD * usdEx, EXCHANGE_USD * usdEx, totalAssets)

//Calcultion and judgement variable before display
[infoText, infoColor] = getDisplayInfo(totalAssets, totalSpecultaionAssets, speculationPNL, speculaionPNLRatio)

//Ë®àÁÆóÂêÑÈ†ÖÁõÆ"ÂÜçÂπ≥Ë°°"Êï∏ÂÄº
float cashDiffRatio = lib.getRatioDiff(cashRatioNow, cashRatio)
string cashDiffText = fm.fString(cashRebalance, 0) + "\t„Äê" + fm.ratioString(cashDiffRatio) + "„Äë"  
color cashColor = math.abs(cashDiffRatio) > 0.1 ? colour.FIRE_BRICK(0) : DF_TEXT_COLOR

float twStockDiffRatio = lib.getRatioDiff(twStocksRatioNow, twStocksRatio)
string twStockDiffText = fm.fString(stockRebalance, 0) + "\t„Äê" + fm.ratioString(twStockDiffRatio) + "„Äë"
string twStockPNLText = getRebalanceText("Âè£Ë¢ã ", BANK3_AVAL, stockRebalance)
color stockColor = math.abs(twStockDiffRatio) > 0.1 ? colour.FIRE_BRICK(0) : DF_TEXT_COLOR

float cryptoDiffRatio = lib.getRatioDiff(cryptoRatioNow, cryptoRatio)
string cryptoDiffText = fm.fString(cryptoRebalance, 0) + "\t„Äê" + fm.ratioString(cryptoDiffRatio) + "„Äë"
string cryptoPNLText = getRebalanceText("MAX ", MAX_AVAL * usdEx, cryptoRebalance)
color cryptoColor = math.abs(cryptoDiffRatio) > 0.1 ? colour.FIRE_BRICK(0) : DF_TEXT_COLOR
string currentDate = str.format_time(timenow, "yyyy/MM/dd", "Asia/Taipei")
string currentTime = str.format_time(timenow, "HH:mm:ss", "Asia/Taipei")

// Âè∞ËÇ°Ë≥áÁî¢ÂÜçÂπ≥Ë°°
float _006208DiffRatio = lib.getRatioDiff(now006208Ratio, _006208Ratio / 100)
float _006208RebalanceValue = totalAssets * _006208Ratio / 100 - remain006208
string _006208RebalanceText = fm.fString(_006208RebalanceValue, 0) + "\t„Äê" + fm.ratioString(_006208DiffRatio) + "„Äë"  

float _00631LDiffRatio = lib.getRatioDiff(now00631LRatio, _00631LRatio / 100)
float _00631LRebalanceValue = totalAssets * _00631LRatio / 100 - remain00631L
string _00631LRebalanceText = fm.fString(_00631LRebalanceValue, 0) + "\t„Äê" + fm.ratioString(_00631LDiffRatio) + "„Äë"  

// Âä†ÂØÜË≥áÁî¢ÂÜçÂπ≥Ë°°
float btcDiffRatio = lib.getRatioDiff(nowBTCRatio, btcRatio / 100)
float btcRebalanceValue = totalAssets * btcRatio / 100 - remainBTC
string btcRebalaneText = fm.fString(btcRebalanceValue, 0) + "\t„Äê" + fm.ratioString(btcDiffRatio) + "„Äë"  

float ethDiffRatio = lib.getRatioDiff(nowETHRatio, ethRatio / 100)
float ethRebalanceValue = totalAssets * ethRatio / 100 - remainETH
string ethRebalaneText = fm.fString(ethRebalanceValue, 0) + "\t„Äê" + fm.ratioString(ethDiffRatio) + "„Äë"  

float croDiffRatio = lib.getRatioDiff(nowCRORatio, croRatio / 100)
float croRebalanceValue = totalAssets * croRatio / 100 - remainCRO
string croRebalaneText = fm.fString(croRebalanceValue, 0) + "\t„Äê" + fm.ratioString(croDiffRatio) + "„Äë"  

float maticDiffRatio = lib.getRatioDiff(nowMATICRatio, maticRatio / 100)
float maticRebalanceValue = totalAssets * maticRatio / 100 - remainMATIC
string maticRebalaneText = fm.fString(maticRebalanceValue, 0) + "\t„Äê" + fm.ratioString(maticDiffRatio) + "„Äë"  

float adaDiffRatio = lib.getRatioDiff(nowADARatio, adaRatio / 100)
float adaRebalanceValue = totalAssets * adaRatio / 100 - remainADA
string adaRebalaneText = fm.fString(adaRebalanceValue, 0) + "\t„Äê" + fm.ratioString(adaDiffRatio) + "„Äë"  

//Ë®àÁÆóÂÄãÈ†ÖÁõÆ"È†êË®≠ÈÖçÊØî"Êï∏ÂÄº
string titleCashRatio = "\t„Äê" + fm.fString(INPUT_CASH_RATIO, 0) + "%„Äë"
string titleStockRatio = "\t„Äê" + fm.fString(INPUT_SPECULATION_RATIO * INPUT_TW_STOCKS_RATIO / 100, 0) + "%„Äë"
string titleCryptoRatio = "\t„Äê" + fm.fString(INPUT_SPECULATION_RATIO * INPUT_CRYPTO_RATIO / 100, 0) + "%„Äë"

string title006208Ratio = "\t„Äê" + fm.fString(_006208Ratio , 0) + "%„Äë"
string title00631LRatio = "\t„Äê" + fm.fString(_00631LRatio , 0) + "%„Äë"

string titleBTCRatio = "\t„Äê" + fm.fString(btcRatio , 0) + "%„Äë"
string titleETHRatio = "\t„Äê" + fm.fString(ethRatio , 0) + "%„Äë"
string titleCRORatio = "\t„Äê" + fm.fString(croRatio , 0) + "%„Äë"
string titleADARatio = "\t„Äê" + fm.fString(adaRatio , 0) + "%„Äë"
string titleMATICRatio = "\t„Äê" + fm.fString(maticRatio , 0) + "%„Äë"

if barstate.islast
    // ratioTabel := table.new(
    //  position       =  position.middle_left,
    //  columns        =  4,
    //  rows           =  5,
    //  //  bgcolor        =  color.new(color = colour.DIM_GRAY(), transp = 0),
    //  //  frame_color    =  color.new(color =  color.black, transp = 0),
    //  frame_width    =  5,
    //  //  border_color   =  color.new(color =  color.black, transp = 0),
    //  border_width   =  3
    //  )

    // cellRatio(0, 0, "È†ÖÁõÆ", DF_TEXT_COLOR, DF_CELL_COLOR)
    // cellRatio(1, 0, "ÈÖçÊØî", DF_TEXT_COLOR, DF_CELL_COLOR)

    // cellRatio(0, 1, "ÁèæÈáë", DF_TEXT_COLOR, DF_CELL_COLOR)
    // cellRatio(1, 1,  fm.ratioString(INPUT_CASH_RATIO / 100), DF_TEXT_COLOR, DF_CELL_COLOR)

    // cellRatio(0, 2, "Â∏ÇÂ†¥", DF_TEXT_COLOR, DF_CELL_COLOR)
    // cellRatio(1, 2,  fm.ratioString(INPUT_SPECULATION_RATIO / 100), DF_TEXT_COLOR, DF_CELL_COLOR)

    
    // cellRatio(0, 3, "Âè∞ËÇ°", DF_TEXT_COLOR, DF_CELL_COLOR)
    // cellRatio(1, 3,  fm.ratioString(INPUT_TW_STOCKS_RATIO / 100), DF_TEXT_COLOR, DF_CELL_COLOR)

    // cellRatio(0, 4, "Âπ£Âúà", DF_TEXT_COLOR, DF_CELL_COLOR)
    // cellRatio(1, 4,  fm.ratioString(INPUT_CRYPTO_RATIO / 100), DF_TEXT_COLOR, DF_CELL_COLOR)


    int nextRow = 0
    displayTabel := table.new(
     position       =  lib.getTablePosition(INPUT_DISPLAY_POSITION),
     columns        =  8,
     rows           =  25,
     //  bgcolor        =  color.new(color = colour.DIM_GRAY(), transp = 0),
     //  frame_color    =  color.new(color =  color.black, transp = 0),
     frame_width    =  5,
     //  border_color   =  color.new(color =  color.black, transp = 0),
     border_width   =  3
     )
    
    // Draw table
    //Ê®ôÈ°å
    cell(0, nextRow, infoText, infoColor, DF_CELL_COLOR)
    cell(1, nextRow, "üëà\t" + INPUT_DISPLAY_INFO, DF_TEXT_COLOR, DF_CELL_COLOR)
    cell(2, nextRow, currentDate, colour.LIGHT_STEEL_BLUE(0), DF_CELL_COLOR)
    cell(3, nextRow, currentTime, colour.LIGHT_STEEL_BLUE(0), DF_CELL_COLOR)
    // cell(4, nextRow, "Á∏ΩÊäïÂÖ•\tüëâ", DF_TEXT_COLOR, DF_CELL_COLOR)
    // cell(5, nextRow, fm.fString(allCost, 0) + "(" + INPUT_DISPLAY_CURRENCY + ")", DF_TEXT_COLOR, DF_CELL_COLOR)
    cell(4, nextRow, "Á∏ΩË≤†ÂÇµ\tüëâ", DF_TEXT_COLOR, DF_CELL_COLOR)
    cell(5, nextRow, fm.fString(allDedt, 0) + "(" + INPUT_DISPLAY_CURRENCY + ")", DF_TEXT_COLOR, DF_CELL_COLOR)
    nextRow := nextRow + 1

    if INPUT_DISPLAY_TITLE
        cell(0, nextRow, "È†ÖÁõÆ", DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(1, nextRow, "Áï∂ÂâçÂç†ÊØî", DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(2, nextRow, "ÂÜçÂπ≥Ë°°" + "\t(" + INPUT_DISPLAY_CURRENCY + ")", DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(3, nextRow, "ÂÉπÂÄº" + "\t(" + INPUT_DISPLAY_CURRENCY + ")", DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(4, nextRow, "PNL" + "\t(" + INPUT_DISPLAY_CURRENCY + ")", DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(5, nextRow, "Â∑≤ÁµêÁõàËôß" + "\t(" + INPUT_DISPLAY_CURRENCY + ")", DF_TEXT_COLOR, DF_CELL_COLOR)
        nextRow := nextRow + 1
        nextRow := cellBlank(nextRow)

    //-----------------ÁèæÈáë-----------------//
    if INPUT_DISPLAY_CASH
        cell(0, nextRow, CASH_TITLE + titleCashRatio, colour.DARK_GOLDEN_ROD(0), DF_CELL_COLOR)
        cell(1, nextRow, fm.ratioString(cashRatioNow), DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(2, nextRow, cashDiffText, cashColor, DF_CELL_COLOR)
        cell(3, nextRow, fm.fString(totalCash, 0), DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(4, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
        nextRow := nextRow + 1
        nextRow := cellBlank(nextRow)

    //-----------------Âè∞ËÇ°-----------------//
    if INPUT_DISPLAY_TWSTOCK
        cell(0, nextRow, TW_STOCKS_TITLE + titleStockRatio,  colour.DARK_GOLDEN_ROD(0), DF_CELL_COLOR)
        cell(1, nextRow, fm.ratioString(twStocksRatioNow), DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(2, nextRow, twStockDiffText, stockColor, DF_CELL_COLOR)
        cell(3, nextRow, fm.fString(totalStocksAssets, 0), DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(4, nextRow, twStockPNLText, DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
        nextRow := nextRow + 1

        if IS_006208_DISPLAY
            cellRebalance(nextRow, "ÂØåÈÇ¶50" + title006208Ratio, now006208Ratio, _006208RebalanceText)
            cellIncome(nextRow, _006208_INCOME * twdEx, _006208_COST * twdEx, INPUT_006208_COST * twdEx)
            nextRow := cellPNL(nextRow, remain006208, pnl006208, pnlPercent006208)

        if IS_00631L_DISPLAY
            cellRebalance(nextRow, "ÂÖÉÂ§ß50Ê≠£‰∫å" + title00631LRatio, now00631LRatio, _00631LRebalanceText)
            cellIncome(nextRow, _00631L_INCOME * twdEx, _00631L_COST * twdEx, INPUT_00631L_COST * twdEx)
            nextRow := cellPNL(nextRow, remain00631L, pnl00631L, pnlPercent00631L)

        nextRow := cellBlank(nextRow)

    //-----------------Âπ£Âúà-----------------//
    if INPUT_DISPLAY_CRYPTO
        cell(0, nextRow, CRYPTO_TITLE + titleCryptoRatio,  colour.DARK_GOLDEN_ROD(0), DF_CELL_COLOR)
        cell(1, nextRow, fm.ratioString(cryptoRatioNow), DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(2, nextRow, cryptoDiffText, cryptoColor, DF_CELL_COLOR)
        cell(3, nextRow, fm.fString(totalCryptoAssets, 0), DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(4, nextRow, cryptoPNLText, DF_TEXT_COLOR, DF_CELL_COLOR)
        cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
        nextRow := nextRow + 1

        if IS_BTC_DISPLAY
            cellRebalance(nextRow, "‚Çø\tBTC" + titleBTCRatio, nowBTCRatio, btcRebalaneText)
            cellIncome(nextRow, BTC_INCOME * usdEx, BTC_COST * usdEx, INPUT_BTC_COST * usdEx)
            nextRow := cellPNL(nextRow, remainBTC, pnlBTC, pnlPercentBTC)
        
        if IS_ETH_DISPLAY
            cellRebalance(nextRow, "‚ü†\tETH" + titleETHRatio, nowETHRatio, ethRebalaneText)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainETH, pnlETH, pnlPercentETH)
        
        if IS_CRO_DISPLAY
            cellRebalance(nextRow, "CRO" + titleCRORatio, nowCRORatio, croRebalaneText)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainCRO, pnlCRO, pnlPercentCRO)
        
        if IS_MATIC_DISPLAY
            cellRebalance(nextRow, "MATIC" + titleMATICRatio, nowMATICRatio, maticRebalaneText)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainMATIC, pnlMATIC, pnlPercentMATIC)

        if IS_ADA_DISPLAY
            cellRebalance(nextRow, "ADA" + titleADARatio, nowADARatio, adaRebalaneText)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainADA, pnlADA, pnlPercentADA)
        
        if IS_BNB_DISPLAY
            cellBlankRebalance(nextRow, "BNB", nowBNBRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainBNB, pnlBNB, pnlPercentBNB)

        if IS_BIT_DISPLAY
            cellBlankRebalance(nextRow, "BIT", nowBITRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainBIT, pnlBIT, pnlPercentBIT)

        if IS_DYDX_DISPLAY
            cellBlankRebalance(nextRow, "DYDX", nowDYDXRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainDYDX, pnlDYDX, pnlPercentDYDX)

        if IS_ALI_DISPLAY
            cellBlankRebalance(nextRow, "ALI", nowALIRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainALI, pnlALI, pnlPercentALI)

        if IS_FET_DISPLAY
            cellBlankRebalance(nextRow, "FET", nowFETRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainFET, pnlFET, pnlPercentFET)   

        if IS_ILV_DISPLAY
            cellBlankRebalance(nextRow, "ILV", nowILVRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainILV, pnlILV, pnlPercentILV)

        if IS_GMT_DISPLAY
            cellBlankRebalance(nextRow, "GMT", nowGMTRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainGMT, pnlGMT, pnlPercentGMT)

        if IS_OTHER_DISPLAY
            cellBlankRebalance(nextRow, "ÂûÉÂúæÂπ£", nowOthersRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainOther, pnlOther, pnlPercentOther)

        if IS_USDT_DISPLAY
            cellBlankRebalance(nextRow, "USDT", nowUSDTRatio)
            cell(5, nextRow, lib.DISPLAY_NONE(), DF_TEXT_COLOR, DF_CELL_COLOR)
            nextRow := cellPNL(nextRow, remainUSDT, pnlUSDT, pnlPercentUSDT)

        if DEBUG
            getCurrentSymbol(speculationPNL)

if INPUT_DISPLAY_ASSETS_CHART
    if bar_index == 1
        line.new(x1 = bar_index, y1 = 0, x2 = bar_index + 1, y2 = 0, extend = extend.both, color = colour.ANTIQUE_WHITE(70), width = 4) 



    if array.size(rdArray) != 0
        temp = array.get(rdArray, index = 0)
        if lib.isDate(temp.mYear, temp.mMonth, temp.mDay)
            recordAssetsVariation := temp.mNowTotal
            if array.size(rdArray) != 1
                array.shift(rdArray)  
    else
//fake
        array.push(rdArray, newData(2022, 5, 28, 5161))
        array.push(rdArray, newData(2022, 6, 1, 7161))
        array.push(rdArray, newData(2022, 6, 4, -1361))
        array.push(rdArray, newData(2022, 6, 6, -5161))
        array.push(rdArray, newData(2022, 6, 9, -8161))
        array.push(rdArray, newData(2022, 6, 13, -11161))
        array.push(rdArray, newData(2022, 6, 15, -19161))
        array.push(rdArray, newData(2022, 6, 20, -24161))
        array.push(rdArray, newData(2022, 6, 21, -30161))
        array.push(rdArray, newData(2022, 6, 26, -39161))
        array.push(rdArray, newData(2022, 6, 29, -44161))
        array.push(rdArray, newData(2022, 6, 30, -50161))
        array.push(rdArray, newData(2022, 7, 2, -54161))
        array.push(rdArray, newData(2022, 7, 7, -46161))
        array.push(rdArray, newData(2022, 7, 11, -74161))
        array.push(rdArray, newData(2022, 7, 14, -94161))
        array.push(rdArray, newData(2022, 7, 15, -74161))
        array.push(rdArray, newData(2022, 7, 20, -104161))
        array.push(rdArray, newData(2022, 7, 22, -114161))
        array.push(rdArray, newData(2022, 7, 28, -124161))
        array.push(rdArray, newData(2022, 7, 30, -144161))
        array.push(rdArray, newData(2022, 8, 3, -194161))
        array.push(rdArray, newData(2022, 8, 6, -164161))
        array.push(rdArray, newData(2022, 8, 8, -154161))
        array.push(rdArray, newData(2022, 8, 12, -164161))
        array.push(rdArray, newData(2022, 8, 15, -184161))
        array.push(rdArray, newData(2022, 8, 17, -192161))
        array.push(rdArray, newData(2022, 8, 20, -204161))
//fake
        array.push(rdArray, newData(2022, 8, 22, -224161)) 
        array.push(rdArray, newData(2022, 8, 29, -244077))
        array.push(rdArray, newData(2022, 9, 5, -244682))
        array.push(rdArray, newData(2022, 9, 12, -232487))
        array.push(rdArray, newData(2022, 9, 24, -234052))
        array.push(rdArray, newData(2022, 10, 20, -252814))
        array.push(rdArray, newData(2022, 10, 31, -236102))
        array.push(rdArray, newData(2022, 11, 12, -279702))
        array.push(rdArray, newData(2022, 11, 13, -298406))
        array.push(rdArray, newData(2022, 11, 24, -301561))
        array.push(rdArray, newData(2022, 12, 19, -325004))
        array.push(rdArray, newData(2022, 12, 29, -323720))
        array.push(rdArray, newData(2023, 1, 14, -299458))
        array.push(rdArray, newData(2023, 1, 21, -280488))
        array.push(rdArray, newData(2023, 1, 29, -281278))
        array.push(rdArray, newData(2023, 2, 5, -291086))
        array.push(rdArray, newData(2023, 2, 9, -279449))
        array.push(rdArray, newData(2023, 2, 10, -307114))
        array.push(rdArray, newData(2023, 2, 13, -313540)) 
        array.push(rdArray, newData(2023, 2, 17, -291666))
        array.push(rdArray, newData(2023, 2, 18, -286358))
        array.push(rdArray, newData(2023, 2, 20, -281833))
        array.push(rdArray, newData(2023, 2, 22, -275244))
        array.push(rdArray, newData(2023, 2, 24, -284224))
        array.push(rdArray, newData(2023, 3, 2, -286968))
        array.push(rdArray, newData(2023, 3, 3, -298380))
        array.push(rdArray, newData(2023, 3, 7, -297185))
        array.push(rdArray, newData(2023, 3, 10, -320464))
        array.push(rdArray, newData(2023, 3, 14, -290237))
        array.push(rdArray, newData(2023, 3, 15, -281158))
        array.push(rdArray, newData(2023, 3, 17, -281658))
        array.push(rdArray, newData(2023, 3, 18, -267755))
        array.push(rdArray, newData(2023, 3, 22, -270501))
        array.push(rdArray, newData(2023, 4, 3, -275587))
        array.push(rdArray, newData(2023, 4, 5, -267601))
        array.push(rdArray, newData(2023, 4, 7, -273668))
        array.push(rdArray, newData(2023, 4, 11, -268450))
        array.push(rdArray, newData(2023, 4, 12, -266281))
        array.push(rdArray, newData(2023, 4, 14, -259939))
        array.push(rdArray, newData(2023, 4, 17, -262168))
        array.push(rdArray, newData(2023, 4, 18, -255441))
        array.push(rdArray, newData(2023, 4, 24, -281677))
        array.push(rdArray, newData(2023, 4, 26, -258756))
        array.push(rdArray, newData(2023, 5, 3, -274724))
        array.push(rdArray, newData(2023, 5, 9, -289360))
        array.push(rdArray, newData(2023, 5, 13, -294333))
        array.push(rdArray, newData(2023, 5, 22, -295301))
        array.push(rdArray, newData(2023, 5, 28, -293536))
        array.push(rdArray, newData(2023, 6, 4, -288652))
        array.push(rdArray, newData(2023, 6, 6, -301113))
        array.push(rdArray, newData(2023, 6, 10, -319218))
        array.push(rdArray, newData(2023, 6, 15, -324059))
        array.push(rdArray, newData(2023, 6, 17, -312428))
        array.push(rdArray, newData(2023, 6, 21, -293340))
        array.push(rdArray, newData(2023, 6, 22, -277590))
        array.push(rdArray, newData(2023, 6, 26, -272915))
        array.push(rdArray, newData(2023, 6, 30, -286295))
        array.push(rdArray, newData(2023, 7, 2, -307327))
        array.push(rdArray, newData(2023, 7, 12, -298193))
        array.push(rdArray, newData(2023, 7, 18, -332354))
        array.push(rdArray, newData(2023, 8, 15, -334905))
        array.push(rdArray, newData(2023, 8, 19, -367333))
        array.push(rdArray, newData(2023, 9, 6, -372690))
        array.push(rdArray, newData(2023, 9, 20, -362643))
        array.push(rdArray, newData(2023, 9, 27, -370787))
        array.push(rdArray, newData(2023, 10, 10, -370165))

plot(
 series       =  recordAssetsVariation,
 color        =  recordAssetsVariation > 0 ? colour.LIME_GREEN(70) : colour.FIRE_BRICK(70),
 style        =  plot.style_area,
 linewidth    =  3,
 display      =  INPUT_DISPLAY_ASSETS_CHART ? display.all : display.none
 )

// getDebugValue(str.format_time(timenow, "yyyy/MM/dd HH:mm:ss", "Asia/Taipei") )

