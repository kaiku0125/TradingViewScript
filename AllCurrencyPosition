//@version=5

// 1. Import library
import kaiku0125/Debug/1 as debug
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #
indicator(
 title                = "AllCurrencyPosition",
 shorttitle           = "ÁèæË≤®ÊêçÁõä",
 overlay              =  true
//  format               =  ,
//  precision            =  ,
//  scale                =  ,
//  timeframe            = " ",
//  timeframe_gaps       =  ,
//  explicit_plot_zorder =  ,
//  max_lines_count      =  ,
//  max_labels_count     =  ,
//  max_boxes_count      =  
 )
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #

// 2. Preference inputs settings
var string GROUP_CURRENCY = "üí≤ ÁèæË≤®"
var GROUP_VERSION = "üí¨ ÈóúÊñº"
var VERSION_NAME = "v1.0"
var RELEASE_NOTE = VERSION_NAME + " Release note :" + "\n" + 
                     "[1] First release."



// 3. Constant value initialization
var int TOTAL_TITLE_DISPLAY = 3
var int TOTAL_CURRENCY_CLASS = 4 //TODO : Á∏ΩÂÖ±ÊúâÂπæÁ®ÆË≤®Âπ£
var string REMAIN_TITLE = "ÂÉπÂÄº(U)"
var string PROFIT_TITLE = "ÊêçÁõä(U)"


// 4. Variable declartion
var string BTC_SYMBOL = "COINBASE:BTCUSD"
var float MY_BTC_POSITION = input.float(defval = 0.082021, title = "BTCÁ∏ΩÈáè",  step =  1, inline = "01", group = GROUP_CURRENCY) 
var float MY_BTC_COST = input.float(defval = 1800.48, title = " ÊàêÊú¨",  step =  1, inline = "01", group = GROUP_CURRENCY) 
var float currentBTCPrice = 0.0


var string ETH_SYMBOL = "COINBASE:ETHUSD"
var float MY_ETH_POSITION = input.float(defval = 0.134574, title = "ETHÁ∏ΩÈáè",  step =  1, inline = "02", group = GROUP_CURRENCY) 
var float MY_ETH_COST = input.float(defval = 214.2, title = " ÊàêÊú¨",  step =  1, inline = "02", group = GROUP_CURRENCY) 
var float currentETHPrice = 0.0


var string CRO_SYMBOL = "COINBASE:CROUSD"
var float MY_CRO_POSITION = input.float(defval = 21915, title = "CROÁ∏ΩÈáè",  step =  1, inline = "03", group = GROUP_CURRENCY) 
var float MY_CRO_COST = input.float(defval = 3632, title = " ÊàêÊú¨",  step =  1, inline = "03", group = GROUP_CURRENCY) 
var float currentCROPrice = 0.0

var string MATIC_SYMBOL = "COINBASE:MATICUSD"
var float MY_MATIC_POSITION = input.float(defval = 88.9, title = "MATICÁ∏ΩÈáè",  step =  1, inline = "04", group = GROUP_CURRENCY) 
var float MY_MATIC_COST = input.float(defval = 91.8, title = " ÊàêÊú¨",  step =  1, inline = "04", group = GROUP_CURRENCY) 
var float currentMATICPrice = 0.0

INPUT_VERSION_NAME = input.string(defval = VERSION_NAME, title = "ÁâàÊú¨", options = [VERSION_NAME], tooltip = RELEASE_NOTE, group = GROUP_VERSION) 


var table resultTabel = table.new(
 position       =  position.bottom_right,
 columns        =  TOTAL_TITLE_DISPLAY,
 rows           =  TOTAL_CURRENCY_CLASS + 1,
 bgcolor        =  color.new(color = color.gray, transp = 0),
 frame_color    =  color.new(color =  color.black, transp = 0),
 frame_width    =  2,
 border_color   =  color.new(color =  color.black, transp = 0),
 border_width   =  3
 )


// 5. Define functions
getOutput(currentPrice, position, cost) =>
    remain = currentPrice * position
    profit = remain - cost
    profitPercent = (profit / cost) * 100
    [remain, profit, profitPercent]


cell(rowID, title, remain, profit, profitPercent) =>
    table.cell(
     table_id       =  resultTabel, 
     column         =  0, 
     row            =  rowID, 
     text           =  title, 
     text_color     = color.new(color =  color.white, transp = 0), 
     bgcolor        = color.new(color =  color.gray, transp = 0)
     )

    var string remainText = str.tostring(value = remain, format =  "#")
    table.cell(
     table_id       =  resultTabel, 
     column         =  1, 
     row            =  rowID, 
     text           =  remainText, 
     text_color     =  color.new(color =  color.white, transp = 0), 
     bgcolor        =  color.new(color =  color.gray, transp = 0)
     )

    var string profitText = str.tostring(value = profit, format =  "#") 
    var string profitPercentText = str.tostring(value = profitPercent, format =  "#.#") + " %"
    table.cell(
     table_id       =  resultTabel, 
     column         =  2, 
     row            =  rowID, 
     text           =  profitText + " (" + profitPercentText + ")", 
     text_color     =  color.new(color =  profit > 0 ? color.green : color.red, transp = 0), 
     bgcolor        =  color.new(color =  color.gray, transp = 0)
     )


getCurrentSymbol() =>
    string mOutput = str.tostring(value = currentMATICPrice, format =  "#.####")  // currentCROPriceÊõøÊèõÊàêÊÉ≥Âä†ÂÖ•ÁöÑËÆäÊï∏
    label debugLabel = debug.printLabel("ÂúñË°®ID : " + syminfo.tickerid + ", ÂÉπÊ†º : " + mOutput)
    // label.delete(id = debugLabel[1])



// 6. Code logic start
currentBTCPrice := request.security(symbol =  BTC_SYMBOL, timeframe = "S", expression = close)
currentETHPrice := request.security(symbol =  ETH_SYMBOL, timeframe = "S", expression = close)
currentCROPrice := request.security(symbol =  CRO_SYMBOL, timeframe = "S", expression = close)
currentMATICPrice := request.security(symbol =  MATIC_SYMBOL, timeframe = "S", expression = close)

if barstate.islast
    [remainBTC, profitBTC, profitPercentBTC] = getOutput(currentBTCPrice, MY_BTC_POSITION, MY_BTC_COST)
    [remainETH, profitETH, profitPercentETH] = getOutput(currentETHPrice, MY_ETH_POSITION, MY_ETH_COST)
    [remainCRO, profitCRO, profitPercentCRO] = getOutput(currentCROPrice, MY_CRO_POSITION, MY_CRO_COST)
    [remainMATIC, profitMATIC, profitPercentMATIC] = getOutput(currentMATICPrice, MY_MATIC_POSITION, MY_MATIC_COST)
    // Draw table
    table.cell(resultTabel, column = 0, row = 0, text = "ÊêçÁõäÁ•ûÂô®")
    table.cell(resultTabel, column = 1, row = 0, text = REMAIN_TITLE)
    table.cell(resultTabel, column = 2, row = 0, text = PROFIT_TITLE)
    cell(1, "BTC", remainBTC, profitBTC, profitPercentBTC)
    cell(2, "ETH", remainETH, profitETH, profitPercentETH)
    cell(3, "CRO", remainCRO, profitCRO, profitPercentCRO)
    cell(4, "MATIC", remainMATIC, profitMATIC, profitPercentMATIC)
    
    getCurrentSymbol()