//@version=5

// 1. Import library
import kaiku0125/Debug/1 as debug
import kaiku0125/Colour/1 as colour
import kaiku0125/Util/1 as util
//Êó•Á∑öÈô∞ÈôΩËΩâÊèõÊ¢ù‰ª∂
//1.Èô∞ÈôΩËΩâÊèõ
//2.ÂçÄÂüüÈ´ò‰ΩéÈªû
//3.Êàê‰∫§ÈáèË¶ÅÂ§ß
//4.

// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #
indicator(
 title                = "MajorDailyOpenFinder",
 shorttitle           = "ÈáçË¶ÅÊó•Èñã",
 overlay              =  true,
//  format               =  ,
//  precision            =  ,
//  scale                =  ,
//   timeframe            = "D",
//  timeframe_gaps       =  true
//  explicit_plot_zorder =  ,
 max_lines_count      =  20,
 max_labels_count     =  500
//  max_boxes_count      =  
 )
// # ========================================================================= #
// #                   |   Indicator  |
// # ========================================================================= #

// 2. Preference inputs settings
var GROUP_SETTING = "üìå Âà§Âà•Ë®≠ÂÆö"
var GROUP_DISPLAY = "üìä È°ØÁ§∫"
var GROUP_VERSION = "üí¨ ÈóúÊñº"
var BULL_GREEN = "Á∂†Êº≤Á¥ÖË∑å"
var BULL_RED = "Á¥ÖÊº≤Á∂†Ë∑å"
var VERSION_NAME = "v1.0"
var RELEASE_NOTE = VERSION_NAME + " Release note :" + "\n" + 
                     "[1] First release."
                     

INPUT_PREF_BEAR_BULL_CHANGED_NEEDED = input.bool(defval = true, title = "Âà§ÂÆö : Èô∞ÈôΩËΩâÊèõ", tooltip = "ÈôΩËΩâÈô∞ÔºåÈô∞ËΩâÈôΩÊòØÂê¶ÁÇ∫Âà§ÂÆö‰æùÊìö", group =   GROUP_SETTING) 
INPUT_PREF_BAR_PERCENT_NEEDED = input.bool(defval =  true, title = "Âà§ÂÆö : %Êï∏", inline = "01 ", group =   GROUP_SETTING) 
INPUT_PREF_BAR_PERCENT = input.float(defval =  5.0, title = "    Ë™øÊï¥%Êï∏", minval =  1, maxval =  100, step =  0.5, tooltip = "%Êï∏ÊòØÂê¶ÁÇ∫Âà§ÂÆö‰æùÊìö", inline = "01 ", group =  GROUP_SETTING) 
INPUT_PREF_BEAR_DISPLAY = input.bool(defval = true, title = "È°ØÁ§∫_‰æõÊáâÈªû", tooltip = "ÊñºÂúñË°®‰∏äÈ°ØÁ§∫ÂûÇÁõ¥‰æõÊáâÊü±ÂÉπÊ†ºÁ∑ö", group =   GROUP_DISPLAY) 
INPUT_PREF_BULL_DISPLAY = input.bool(defval = true, title = "È°ØÁ§∫_ÈúÄÊ±ÇÈªû", tooltip = "ÊñºÂúñË°®‰∏äÈ°ØÁ§∫ÂûÇÁõ¥ÈúÄÊ±ÇÊü±ÂÉπÊ†ºÁ∑ö", group = GROUP_DISPLAY) 
INPUT_PREF_BEAR_BULL_COUNT = input.int(defval =  3, title = "ÂêÑÈ°ØÁ§∫Êï∏Èáè", minval =  0, maxval =  10, step =  1, tooltip = "È°ØÁ§∫Êï∏Èáè", group =  GROUP_DISPLAY) 
INPUT_PREF_DISPLAY_COLOR = input.string(defval = BULL_GREEN, title = "È°ØÁ§∫È¢®Ê†º", options = [BULL_GREEN, BULL_RED], tooltip = "Ë™øÊï¥È°ØÁ§∫È¢®Ê†ºÈ°èËâ≤", group = GROUP_DISPLAY) 
INPUT_VERSION_NAME = input.string(defval = VERSION_NAME, title = "ÁâàÊú¨", options = [VERSION_NAME], tooltip = RELEASE_NOTE, group = GROUP_VERSION) 


// 3. Constant value initialization
var bool IS_DEBUG = false
var int BEAR = 0
var int BULL = 1
var LABEL_TEXT_COLOR_BULL = INPUT_PREF_DISPLAY_COLOR == BULL_GREEN ? color.green : color.red
var LABEL_TEXT_COLOR_BEAR = INPUT_PREF_DISPLAY_COLOR == BULL_RED ? color.green : color.red
var LINE_COLOR_BULL = INPUT_PREF_DISPLAY_COLOR == BULL_GREEN ? colour.DARK_GREEN() : colour.DARK_RED()
var LINE_COLOR_BEAR = INPUT_PREF_DISPLAY_COLOR == BULL_RED ? colour.DARK_GREEN() : colour.DARK_RED()

// 4. Variable declartion
var bool isBarChanged = false
var bool nextBarNeedShow = false
var int lastDayState = BULL
var int currentDayState = BULL

var label debugLabel = na

//ÂûÇÁõ¥Êü±
var float percent = 0.0
var int percentIndex = 0

//Ëº∏Âá∫ÂúñË°®
var float[] storedOpenPrice = array.new_float()
var float[] displayOpenPrice = array.new_float()
var int[] storedBarIndex = array.new_int() 
var int[] displayBarIndex = array.new_int() 
var float[] storedPercent = array.new_float() 
var float[] displayPercent = array.new_float()
var label displayLabel = na
var line displayLine = na

// 5. Define functions
// Get recently bar and choose bull bear bar.
getLatestOpenIndexArray(arrayOpen, arrayIndex, arrayPercent, isBull) =>
    float[] arrayCopyOpenPriceReverse = array.copy(id = arrayOpen)
    array.reverse(id = arrayCopyOpenPriceReverse)
    int[] arrayCopyIndexReverse = array.copy(id = arrayIndex)
    array.reverse(id = arrayCopyIndexReverse) 
    float[] arrayCopyPercentReverse = array.copy(id = arrayPercent)
    array.reverse(id = arrayCopyPercentReverse)
    int[] returnIndexArray = array.new_int(0)

    int barIndexSize = array.size(id = arrayCopyIndexReverse)
    if barIndexSize >= INPUT_PREF_BEAR_BULL_COUNT
        for i = 0 to (barIndexSize == 0 ? na : array.size(arrayCopyPercentReverse) - 1)
            cond1 = isBull ? array.get(id = arrayCopyPercentReverse, index = i) > 0 : array.get(id = arrayCopyPercentReverse, index = i) < 0 
            cond2 = isBull ? array.get(id = arrayCopyOpenPriceReverse, index = i) - open < 0 : array.get(id = arrayCopyOpenPriceReverse, index = i) - open > 0

            if cond1 and cond2
                array.push(id = returnIndexArray, value = barIndexSize - i - 1)
                if array.size(id = returnIndexArray) == INPUT_PREF_BEAR_BULL_COUNT
                    break 

    returnIndexArray

choseDisplayParamsOutput() =>
    int[] mBullOutputIndex = getLatestOpenIndexArray(storedOpenPrice, storedBarIndex, storedPercent, true)
    int[] mBearOutputIndex = getLatestOpenIndexArray(storedOpenPrice, storedBarIndex, storedPercent, false)
    array.clear(id = displayOpenPrice) 
    array.clear(id = displayBarIndex) 
    array.clear(id = displayPercent)

    // Get bull output
    for i = 0 to (array.size(mBullOutputIndex) == 0 ? na : array.size(mBullOutputIndex) - 1)
        int targetBullIndex = array.get(id = mBullOutputIndex, index = i)
        array.push(id = displayOpenPrice, value = array.get(id = storedOpenPrice, index =  targetBullIndex) ) 
        array.push(id = displayBarIndex, value = array.get(id = storedBarIndex, index =  targetBullIndex) ) 
        array.push(id = displayPercent, value = array.get(id = storedPercent, index =  targetBullIndex) ) 

    //Get bear output
    for i = 0 to (array.size(mBearOutputIndex) == 0 ? na : array.size(mBearOutputIndex) - 1)
        int targetBearIndex = array.get(id = mBearOutputIndex, index = i)
        array.push(id = displayOpenPrice, value = array.get(id = storedOpenPrice, index =  targetBearIndex) ) 
        array.push(id = displayBarIndex, value = array.get(id = storedBarIndex, index =  targetBearIndex) ) 
        array.push(id = displayPercent, value = array.get(id = storedPercent, index =  targetBearIndex) ) 

// 6. Code logic start
//ÊäìÂá∫Èô∞ÈôΩËΩâÊèõbar
dayHigh = request.security(syminfo.tickerid, 'D', high)
dayLow = request.security(syminfo.tickerid, 'D', low)
dayOpen = request.security(syminfo.tickerid, 'D', open)
dayClose = request.security(syminfo.tickerid, 'D', close)
dayVolume = request.security(syminfo.tickerid, 'D', volume)
dayBarIndex = request.security(syminfo.tickerid, 'D', bar_index)
dayTimeClose = request.security(syminfo.tickerid, 'D', time_close)


currentDayState := util.isBullBar(dayClose, dayOpen) ? BULL : BEAR

//Êó•Á∑öÊòØÂê¶Èô∞ÈôΩËΩâÊèõ
cond1 = lastDayState != currentDayState ? true : false
if not INPUT_PREF_BEAR_BULL_CHANGED_NEEDED
    cond1 := true

//ÊâæÂá∫ÁèæÂú®ÊôÇÊ°ÜÊ≠§barÊòØÂê¶ = Êó•Á∑öÈñãÁõ§ÁöÑ‰ΩçÁΩÆ
cond2 = if timeframe.period != util.daily()
    dayTimeClose == time_close[1] ? true : false
else 
    true

//Êó•Á∑öÂûÇÁõ¥Êü± > Ë®≠ÂÆö%Êº≤Ë∑åÂπÖ
percent := util.getBarPercentage(dayClose, dayOpen)
// float seriesPercent = math.abs(getBarPercentage(dayClose, dayOpen)) // ta.sma(source = seriesPercent, length = 20) 

cond3 = math.abs(number = percent)  >  INPUT_PREF_BAR_PERCENT
if not INPUT_PREF_BAR_PERCENT_NEEDED
    cond3 := true

// Â¶ÇÊûúÊ≠§ÊôÇ ‰∏ä‰∏ÄÂÄãÈ°ØÁ§∫Ë¶Åshow && ÊòØÊó•Á∑öÈñãÁõ§‰ΩçÁΩÆ && Êº≤ÂπÖ5%‰ª•‰∏ä
bool finalCond = if timeframe.period != util.daily()
    nextBarNeedShow and cond2 and cond3 and util.isCurrentTimeFrameAvailable()
else
    cond1 and cond2 and cond3 and util.isCurrentTimeFrameAvailable()

if finalCond
    float thisOpenPrice = open[util.getCandleOffestByTimeFrame()]    
    array.push(id = storedOpenPrice, value = thisOpenPrice)
    array.push(id = storedBarIndex, value = bar_index[util.getCandleOffestByTimeFrame()])  
    array.push(id = storedPercent, value = percent) 


if cond1
    nextBarNeedShow := true
else
    nextBarNeedShow := false
    
lastDayState := currentDayState


if barstate.islast
    choseDisplayParamsOutput()
    // Draw all data on chart
    for i = 0 to (array.size(displayOpenPrice) == 0 ? na : array.size(displayOpenPrice) - 1)
        float tempPrice = array.get(id = displayOpenPrice, index = i)
        string tempPriceText = str.tostring(value = tempPrice) 
        int tempIndex = array.get(id = displayBarIndex, index = i)
        float tempPercent = array.get(id = displayPercent, index = i) 
        
        bool isShowBear = INPUT_PREF_BEAR_DISPLAY and tempPercent < 0
        bool isShowBull = INPUT_PREF_BULL_DISPLAY and tempPercent > 0

        if isShowBear or isShowBull 
            displayLabel := label.new(
            //  x            = tempIndex, //
             x            = bar_index + (util.getCandleOffestByTimeFrame() + 1) * 5,
            //  y            = tempPercent > 0 ? low[bar_index - tempIndex] * 0.999 : high[bar_index - tempIndex] * 1.001, //
             y            = tempPrice,
             text         = tempPriceText,
            //  color        = color.new(color = tempPercent > 0 ? color.green : color.red, transp = 0), //
            //  style        = tempPercent > 0 ? label.style_label_up : label.style_label_down, //
             style        = label.style_none,
            //  textcolor    = color.new(color =  color.white, transp = 0) //
             textcolor    = color.new(color = tempPercent > 0 ? LABEL_TEXT_COLOR_BULL : LABEL_TEXT_COLOR_BEAR, transp = 0)
             )
            displayLine := line.new(x1 = tempIndex, y1 = tempPrice, x2 = tempIndex + 1, y2 = tempPrice, extend =  extend.right, color = color.new(color =  tempPercent > 0 ? LINE_COLOR_BULL : LINE_COLOR_BEAR, transp = 0), width = 1) 
            
    
    if IS_DEBUG
        mOutput = str.tostring(value = displayOpenPrice) + "\n"
        mOutput += str.tostring(value = displayBarIndex) + "\n"
        mOutput += str.tostring(value = displayPercent) 
        debugLabel := debug.printLabel(mOutput)
        label.delete(id = debugLabel[1])



